#!/usr/bin/bash
_printQueryUser() {
  #userInfoQuery
  echo '{
  viewer {
    login
    id
    isHireable
    createdAt
    }
  }'
}
_printQueryReposAll() {
  ## query to get 5 last updated repos
  ## use this to list "currently working on"
  #repositories(first: 7, orderBy: {field: PUSHED_AT, direction: DESC}, affiliations: [OWNER, COLLABORATOR, ORGANIZATION_MEMBER], isFork: false) {
  echo 'query {
  user(login: "'$user'") {
  repositories(first: 7, orderBy: {field: PUSHED_AT, direction: DESC}, affiliations: [OWNER, COLLABORATOR, ORGANIZATION_MEMBER]) {
      edges {
        node {
          nameWithOwner
          name
          description
          pushedAt
          url
          }
        }
      }
    }
  }'
}
_printQueryReposOwn() {
  ## query to get 5 last updated repos
  ## use this to list "my projects"
  # repositories(first: 7, orderBy: {field: PUSHED_AT, direction: DESC}, affiliations: [OWNER], isFork: false) {
  echo 'query {
  user(login: "'$user'") {
  repositories(first: 7, orderBy: {field: PUSHED_AT, direction: DESC}, affiliations: [OWNER]) {
      edges {
        node {
          nameWithOwner
          name
          description
          pushedAt
          url
          }
        }
      }
    }
  }'
}
_printQueryReposTotal() {
  echo 'query {
  user(login: "'$user'") {
    publicRepositories: repositories(privacy: PUBLIC) {
      totalCount
    }
    privateRepositories: repositories(privacy: PRIVATE) {
      totalCount
    }
  }
}'
}
_printQueryPullRequests() {
  echo 'query {
  search(query: "user:'$user' is:merged sort:updated-desc", type: ISSUE, first: 5) {
    edges {
      node {
        ... on PullRequest {
          title
          url
          mergedAt
          repository {
          nameWithOwner
          url
          }
        }
      }
    }
  }
}'
}
_printQueryZet() {
  ##FIXME name: zet in repo(), needs to be variable, different users
  #might have different names for their zet repo
  echo 'query {
  repository(owner: "'$user'", name: "zet") {
    nameWithOwner
    refs(
      refPrefix: "refs/tags/",
      first: 5,
      orderBy: {field: TAG_COMMIT_DATE, direction: DESC}
    ) {
      edges {
        node {
          name
          target {
            ... on Commit {
              oid
              treeUrl
              message
              committedDate
            }
          }
        }
      }
    }
  }
}'
}
_printQueryForks() {
  echo 'query {
  user(login: "'$user'") {
    repositories(first: 5, isFork: true, orderBy: {field: CREATED_AT, direction: DESC}) {
      edges {
        node {
          nameWithOwner
          createdAt
          url
          description
        }
      }
    }
  }
}'
}
_printQueryStars() {
  echo 'query {
  user(login: "'$user'") {
    starredRepositories(first: 5, orderBy: {field: STARRED_AT, direction: DESC}) {
      edges {
        starredAt
        node {
          nameWithOwner
          description
          url
        }
      }
    }
  }
}'
}
_printQueryGists() {
  echo 'query {
  user(login: "'$user'") {
    gists(first: 5, orderBy: {field: CREATED_AT, direction: DESC}) {
      edges {
        node {
          createdAt
          description
          url
          owner {
            login
          }
          files(limit: 1) {
            name
          }
        }
      }
    }
  }
}'
}
_printQueryFollowers() {
  echo 'query {
  user(login: "'$user'") {
    followers(last: 5) {
      edges {
        node {
          login
          url
          company
        }
      }
    }
  }
}'
}
_printQuerySponsors() {
  echo '{
  user(login: "'$user'") {
    sponsorshipsAsMaintainer(first: 5, orderBy: {field: CREATED_AT, direction: DESC}) {
      totalCount
      nodes {
        createdAt
        privacyLevel
        sponsorEntity {
          ... on User {
            login
            url
          }
          ... on Organization {
            login
            url
          }
        }
      }
    }
  }
}'
}
_printQueryLanguagesFirstPage() {
  echo '{
  search(query: "user:'$user'", type: REPOSITORY, first: 2) {
    repositoryCount
    pageInfo {
      endCursor
      hasNextPage
    }
    edges {
      node {
        ... on Repository {
          nameWithOwner
          primaryLanguage {
            name
          }
        }
      }
    }
  }
}'
}
_printQueryLanguagesNextPage() {
  echo '{                                                                       
  search(query: "user:'$user'", type: REPOSITORY, first: 2, after: "'$languageCursor'") {                 
    repositoryCount
    pageInfo {
      endCursor
      hasNextPage
    }
    edges {                                                                     
      node {                                                                    
        ... on Repository {                                                     
          nameWithOwner                                                         
          primaryLanguage {                                                     
            name                                                                
          }                                                                     
        }                                                                       
      }                                                                         
    }                                                                           
  }                                                                             
}'
}
_printQueryProductivityFirstRepoPage() {
  ## first main query on first repos
  echo '
query fetchAllData {
  user(login: "'$user'") {
    repositories(first: 2, affiliations: [OWNER, COLLABORATOR, ORGANIZATION_MEMBER]) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        node {
          nameWithOwner
          defaultBranchRef {
            target {
              ... on Commit {
                history(first: 100, author: { id: "'$id'" }, since: "'$since'") {
                  totalCount
                  pageInfo {
                    endCursor
                    hasNextPage
                  }
                  edges {
                    node {
                      committedDate
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}'
}
_printQueryProductivityFirstRepoPageCommitPage() {
  ## first main queries on first repos additional commmits
  echo '
query nextPage {
  user(login: "'$user'") {
    repositories(first: 2, affiliations: [OWNER, COLLABORATOR, ORGANIZATION_MEMBER]) {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        node {
          nameWithOwner
          defaultBranchRef {
            target {
              ... on Commit {
                history(first: 100, author: { id: "'$id'" }, since: "'$since'", after: "'$cursor'") {
                  totalCount
                  pageInfo {
                    endCursor
                    hasNextPage
                  }
                  edges {
                    node {
                      committedDate
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}'
}
_printQueryProductivityNextRepoPage() {
  ## additional repos queries with first 100 commits per repo
  echo '
query fetchAllData {
  user(login: "'$user'") {
    repositories(first: 2, affiliations: [OWNER, COLLABORATOR, ORGANIZATION_MEMBER], after: "'$repoCursor'") {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        node {
          nameWithOwner
          defaultBranchRef {
            target {
              ... on Commit {
                history(first: 100, author: { id: "'$id'" }, since: "'$since'") {
                  totalCount
                  pageInfo {
                    endCursor
                    hasNextPage
                  }
                  edges {
                    node {
                      committedDate
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}'
}
_printQueryProductivityNextRepoPageNextCommitPage() {
  ## additional repos queries with more than 100 commits per repo
  echo '
query nextPage {
  user(login: "'$user'") {
    repositories(first: 2, affiliations: [OWNER, COLLABORATOR, ORGANIZATION_MEMBER], after: "'$repoCursor'") {
      totalCount
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        node {
          nameWithOwner
          defaultBranchRef {
            target {
              ... on Commit {
                history(first: 100, author: { id: "'$id'" }, since: "'$since'", after: "'$cursor'") {
                  totalCount
                  pageInfo {
                    endCursor
                    hasNextPage
                  }
                  edges {
                    node {
                      committedDate
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}'
}


################################# stuff ################################
#_printQueryProductivity() {
#  echo 'query {
#  user(login: "'$user'") {
#    repositories(first: 100, affiliations: [OWNER, COLLABORATOR, ORGANIZATION_MEMBER]) {
#      totalCount
#      edges {
#        node {
#          nameWithOwner
#          defaultBranchRef {
#            target {
#              ... on Commit {
#                history(first: 100, author: { id: "'$id'" }, since: "'$since'") {
#                  totalCount
#                  edges {
#                    node {
#                      committedDate
#                    }
#                  }
#                }
#              }
#            }
#          }
#        }
#      }
##    }
#  }
#}'
#}
#
#_printQueryLanguages() {
#  echo 'query {
#  user(login: "'$user'") {
#    repositories(orderBy: {field: CREATED_AT, direction: DESC}, first: 100, affiliations: [OWNER, COLLABORATOR, ORGANIZATION_MEMBER], isFork: false) {
#      totalCount
#      edges {
#        node {
#          primaryLanguage {
#            name
#          }
#          name
#          nameWithOwner
#        }
#      }
#    }
#  }
#}'
#}
#_printQueryLanguages() {
  #repositoryListQuery
  #generate_language_per_repo: waka-readme-stats
#  echo '{
#  user(login: "'$user'") {
#    repositories(orderBy: {field: CREATED_AT, direction: ASC}, last: 100, affiliations: [OWNER, COLLABORATOR, ORGANIZATION_MEMBER], isFork: false) {
#      totalCount
#      edges {
#        node {
#          object(expression:"main") {
#                ... on Commit {
#                history (author: { id: "'$id'" }){
#                totalCount
#                    }
#                }
#                }
#          primaryLanguage {
#            color
#            name
#            id
#          }
#          stargazers {
#            totalCount
#          }
#          collaborators {
#            totalCount
#          }
#          createdAt
#          name
#          owner {
#            id
#            login
#          }
#          nameWithOwner
#        }
#      }
#    }
#    location
#    createdAt
#    name
#    }
#  }'
#}
#_printQueryReposOwn() {
## This works just fine, but to make the processing/filtering easier I
## choose the same query layout that reposAll has.
   ## query to get 5 last updated repos
#  ## use this to list "my projects"
#  echo 'query {
#  search(query: "user:'$user' sort:updated-desc is:fork:false",
#  type: REPOSITORY, first: 5) {
#    edges {
#      node {
#        ... on Repository {
#          name
#          description
#          pushedAt
#        }
#      }
#    }
#  }
#}'
#}
#_printQueryPullRequestsAll() {
## This includes the pull requests from other users if they collaborate
## on a repo that the $user also does.
#  echo 'query {
#  user(login: "'$user'") {
#    repositories(first: 100, affiliations: [OWNER, COLLABORATOR, ORGANIZATION_MEMBER], isFork: false) {
#      edges {
#        node {
#          name
#          pullRequests(first: 100, states: [OPEN, CLOSED, MERGED], orderBy: {field: CREATED_AT, direction: DESC}) {
#            edges {
#              node {
#                title
#                createdAt
#                updatedAt
#                state
#                url
#                author {
#                  login
#                }
#              }
#            }
#          }
#        }
#      }
#    }
#  }
#}'
#}
#_printQueryPullRequestsAll() {
## This includes the pull requests from other users if they collaborate
## on a repo that the $user also does.
#  echo 'query {
#  viewer {
#    repositories(first: 100) {
#      nodes {
#        name
#        pullRequests(first: 5, states: [MERGED], orderBy: {field: CREATED_AT, direction: DESC}) {
#          nodes {
#            number
#            url
#            state
#            mergedAt
#            title
#            reviews(last: 100) {
#              nodes {
#                author {
#                  login
#                }
#                state
#              }
#            }
#          }
#        }
#      }
#    }
#  }
#}'
#}
#
#_printQueryZet() {
#  echo 'query {
#  repository(owner: "'$user'", name: "zet") {
#    defaultBranchRef {
#      target {
#        ... on Commit {
#          history(first:5) {
#            edges {
#              node {
#                repository {
#                  name
#              }
#                treeUrl
#                message
#                committedDate
#              }
#            }
#          }
#        }
#      }
#    }
#    refs(
#      refPrefix: "refs/tags/",
#      last: 5,
#      orderBy: {field: TAG_COMMIT_DATE, direction: DESC}
#    ) {
#      edges {
#        node {
#          name
#        }
#      }
#    }
#  }
#}'
#}
